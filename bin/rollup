#!/usr/bin/env node

var rollup = require('rollup'),
    nodeResolve = require('rollup-plugin-node-resolve');

rollup.rollup({
  entry: 'index.js',
  onwarn: function (warning) {
    // Suppress this error message... there are hundreds of them. Angular team says to ignore it.
    // https://github.com/rollup/rollup/wiki/Troubleshooting#this-is-undefined
    if (/The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten./.test(warning)) {
      if (warning.code === 'THIS_IS_UNDEFINED') return;
    }
  },
  plugins: [resolveCache(nodeResolve({jsnext: true}))]
}).then(function(bundle) {
  return bundle.write({
    name: 'vega',
    file: 'build/vega-dataflow.js',
    format: 'umd',
    onwarn: function (warning) {
      // Suppress this error message... there are hundreds of them. Angular team says to ignore it.
      // https://github.com/rollup/rollup/wiki/Troubleshooting#this-is-undefined
      if (/The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten./.test(warning)) {
        if (warning.code === 'THIS_IS_UNDEFINED') return;
      }
    }
  })
}).then(function() {
  console.warn('â†³ build/vega-dataflow.js');
}).catch(abort);

function abort(error) {
  console.error(error.stack);
}

/**
 * Rollup plugin that caches node_modules resolutions. This ensures that only
 * one version of each module is included in the output bundle, BUT assumes
 * that all shared dependencies are of the same version.
 */
function resolveCache(_) {
  var cache = {};
  return {
    resolveId: function(importee, importer) {
      return (importee && importee[0] !== '.')
        ? cache[importee] || (cache[importee] = _.resolveId(importee, importer))
        : _.resolveId(importee, importer);
    }
  };
}
